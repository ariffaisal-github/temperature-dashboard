services:
  # --- BACKENDS ---
  backend1:
    build: ./backend
    container_name: backend1
    restart: always
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis # optional, if your app reads env var
    ports:
      - "3001:3000"
    networks:
      - app_net
    depends_on:
      - redis

  backend2:
    build: ./backend
    container_name: backend2
    restart: always
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
    ports:
      - "3002:3000"
    networks:
      - app_net
    depends_on:
      - redis

  backend3:
    build: ./backend
    container_name: backend3
    restart: always
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
    ports:
      - "3003:3000"
    networks:
      - app_net
    depends_on:
      - redis

  # --- FRONTENDS ---
  frontend1:
    build: ./frontend
    container_name: frontend1
    restart: always
    ports:
      - "5174:5173"
    networks:
      - app_net

  frontend2:
    build: ./frontend
    container_name: frontend2
    restart: always
    ports:
      - "5175:5173"
    networks:
      - app_net

  frontend3:
    build: ./frontend
    container_name: frontend3
    restart: always
    ports:
      - "5176:5173"
    networks:
      - app_net

  # --- NGINX (Reverse Proxy) ---
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend1
      - backend2
      - backend3
      - frontend1
      - frontend2
      - frontend3
    networks:
      - app_net

  # --- REDIS ---
  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  redis-data:
